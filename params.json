{"name":"Finite State Machine Utilities: Scala","tagline":"Models of finite automata (DFA, NFA) with support of common operations and easily readable creation of concrete machines","body":"FSAUtils\r\n========\r\n\r\nModels of finite automata (DFA, NFA) with support of common operations and easily readable creation of objects.\r\n\r\nThe main goals of this project are:\r\n\r\n* Support of easily readable definitions of finite automata (FA) and regular expressions\r\n* Support of important basic operations on FA\r\n* Adherence to the following coding guidelines aiming to assure correctness:\r\n    * Simple and easily understandable code\r\n    * Mostly adherence to the functional programming paradigm\r\n    * Functional parts of the code (the core) closely follows abstract mathematical definitions of the respective operations\r\n\r\nFeatures supported so far\r\n-------------------------\r\n\r\n* Creation of Deterministic Finite Automata (DFA)\r\n* Creation of Nondeterministic Finite Automata (NFA)\r\n* Determinization of NFA\r\n* Creation of Regular Expressions (RE)\r\n* Checking for acceptance of a word by an automaton\r\n* Concatenation, Star, Union, Intersection, Complement for DFA/NFA\r\n* Checking DFA/NFA for equivalence\r\n* Implicit conversion of DFA to NFA\r\n* Pretty-printing toString methods for DFA/NFA\r\n\r\nPlanned Features\r\n----------------\r\n\r\n* Minimization of DFA\r\n* Determination of the language (RE) of a DFA/NFA\r\n* Checking for equivalence of DFA/NFA with RE\r\n\r\nGet Started\r\n-----------\r\n\r\n**Prerequisites:** You need to have Scala and the JVM installed. FSAUtils\r\nhas been tested with Scala 2.11 and Java 1.7. Furthermore, the environment\r\nvariable `$SCALA_HOME` has to be correctly set to the path where Scala resides.\r\n\r\nThe following steps should work for a Linux system.\r\n\r\n1. Download the archive:\r\n   ```bash\r\n   wget https://github.com/rindPHI/FSAUtils/archive/master.zip\r\n   ```\r\n   \r\n2. Unzip it:\r\n   ```bash\r\n   unzip master.zip\r\n   ```\r\n   \r\n2. Build it:\r\n   ```bash\r\n   cd FSAUtils-master\r\n   ant\r\n   ```\r\n   \r\n   As the result, you find a file \"FSAUtils.jar\" in the directory `lib/`\r\n   which you need to add to the classpath of scalac and scala in order\r\n   to compile / run your objects that make use of FSAUtils.\r\n   \r\n3. In your Scala files, add the import\r\n   ```scala\r\n   import de.dominicscheurer.fsautils._\r\n   ```\r\n   \r\n   and, if you want to use the FSA domain specific language\r\n   for better readability, let your object extend `FSA_DSL`:\r\n   \r\n   ```scala\r\n   object MyObject extends FSA_DSL {\r\n   ```\r\n   \r\n4. Compile your scala object:\r\n   ```bash\r\n   scalac -classpath \"/path/to/FSAUtils.jar\" YourObject.scala\r\n   ```\r\n   \r\n5. ...and run it:\r\n   ```bash\r\n   scala -classpath \".:/path/to/FSAUtils.jar\" YourObject\r\n   ```\r\n   \r\nAn example file like mentioned in points 3. to 5. could have, for instance,\r\nthe following content:\r\n\r\n```scala\r\nimport de.dominicscheurer.fsautils._\r\n\r\nobject FSAUtilsTest extends FSA_DSL {\r\n  \r\n    def main(args: Array[String]) {\r\n      val myDFA =\r\n            dfa ('Z, 'S, 'q0, 'd, 'A) where\r\n                'Z  ==> Set('a, 'b)   and\r\n                'S  ==> Set(0, 1)     and\r\n                'q0 ==> 0             and\r\n                'A  ==> Set(0)        and\r\n                'd  ==> Delta(\r\n                      (0, 'a) -> 0,\r\n                      (0, 'b) -> 1,\r\n                      (1, 'a) -> 0,\r\n                      (1, 'b) -> 1\r\n                )|\r\n        \r\n        print(\"DFA accepts aaab: \")\r\n        println(myDFA accepts \"aaab\")\r\n        print(\"DFA accepts aaaba: \")\r\n        println(myDFA accepts \"aaaba\")\r\n    }\r\n    \r\n}\r\n```\r\n\r\nExamples\r\n--------\r\n\r\nPlease consider the files Main.scala and FSA_DSL_Test.scala to see some\r\nworking applied examples.\r\n\r\n### Creation of a DFA\r\n\r\n```scala\r\nval myDFA =\r\n    dfa ('Z, 'S, 'q0, 'd, 'A) where\r\n\t    'Z  ==> Set('a, 'b)   and\r\n\t    'S  ==> Set(0, 1)     and\r\n\t    'q0 ==> 0             and\r\n\t    'A  ==> Set(0)        and\r\n\t    'd  ==> Delta(\r\n              (0, 'a) -> 0,\r\n              (0, 'b) -> 1,\r\n              (1, 'a) -> 0,\r\n              (1, 'b) -> 1\r\n        )|\r\n\r\nprint(\"DFA accepts aaab: \")\r\nprintln(myDFA accepts \"aaab\")\r\n```\r\n\r\n### Creation of an NFA\r\n\r\n```scala\r\nval myNFA =\r\n    nfa ('Z, 'S, 'q0, 'd, 'A) where\r\n        'Z  ==> Set('a, 'b)   and\r\n        'S  ==> Set(0, 1)     and\r\n        'q0 ==> 0             and\r\n        'A  ==> Set(1)        and\r\n        'd  ==> Delta(\r\n              (0, 'a) -> Set(0, 1),\r\n              (0, 'b) -> Set(0)\r\n        )||\r\n\r\nprint(\"NFA accepts aaab: \")\r\nprintln(myNFA accepts \"aaab\")\r\n```\r\n\r\n### Star Operation for NFA\r\n\r\n```scala\r\nprintln((myNFA*) accepts \"aaabaaab\")\r\n```\r\n\r\n### Determinization for NFA\r\n\r\n```scala\r\nprintln((myNFA toDFA) accepts \"aaab\")\r\n```\r\n\r\n### Complement for DFA\r\n\r\n```scala\r\nprintln((!myDFA) accepts \"aaab\")\r\n```\r\n\r\n### Concatenation\r\n\r\n```scala\r\nprintln(myNFA ++ myNFA2);\r\n```\r\n\r\n### Pretty Printing\r\n\r\n`println(myNFA toDFA)` yields:\r\n\r\n```\r\nDFA (Z,S,q0,d,A) with\r\n|    Z = {a,b}\r\n|    S = {{},{0},{1},{0,1}}\r\n|    q0 = {0}\r\n|    A = {{1},{0,1}}\r\n|    d = {\r\n|        ({},a) => {},\r\n|        ({},b) => {},\r\n|        ({0},a) => {0,1},\r\n|        ({0},b) => {0},\r\n|        ({1},a) => {},\r\n|        ({1},b) => {},\r\n|        ({0,1},a) => {0,1},\r\n|        ({0,1},b) => {0}\r\n|    }\r\n```\r\n\r\n### Creation of RE\r\n\r\n```scala\r\ndef myRegExp = (('a*) + ('b & ('b*) & 'a))* : RE\r\n```\r\n\r\nLicense\r\n-------\r\n\r\nCopyright 2014 Dominic Scheurer\r\n    \r\nThis file is part of FSAUtils.\r\n     \r\nFSAUtils is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n     \r\nFSAUtils is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU General Public License for more details.\r\n     \r\nYou should have received a copy of the GNU General Public License\r\nalong with FSAUtils.  If not, see <http://www.gnu.org/licenses/>.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}